name: Main workflow for building the shared nuget packages.
on:
  ## This tries to avoid unessesary pushes to forked repo
  ## development branches. No sense in a dev building every
  ## time they push for a PR and no one should be working on
  ## common branches in their fork.
  push:
    branches:
      - master
      - main
      - v[0-9]+.x
      - develop
      - 'hotfix/**'
      - 'release/**'
      - 'feature/**'
  ## Any pull request.
  pull_request:

# Only run one instance of this workflow at a time per branch.
concurrency:
  group: ${{ github.ref_name }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true

jobs:

  test_build_release:
    name: Test, Build, Publish ${{ matrix.package }} on OS ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]
        package: [NCI.OCPL.Api.Common, NCI.OCPL.Api.Common.Testing]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Build with dotnet
        run: dotnet build --configuration Release /WarnAsError

      - name: Unit Tests (with Coverage)
        shell: bash
        run: |
              if [ "$RUNNER_OS" == "Windows" ]; then
                dotnet test
              else
                dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=../../${{matrix.package}}.lcov   test/${{matrix.package}}.Tests
              fi

      - name: Save Code Coverage Output
        # Coverage output isn't created on Windows, so don't upload it.
        if: matrix.operating-system != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{matrix.package}}-${{ matrix.operating-system }}
          path: ${{matrix.package}}.lcov

      - name: Publish
        shell: bash
        run: |
            dotnet publish --configuration Release --output $GITHUB_WORKSPACE/out src/${{matrix.package}}/

            ## directory for build-info.json
            mkdir -p $GITHUB_WORKSPACE/out/wwwroot/

        # Add the NuGet package to the build artifact.
      - name: Create NuGet package for ${{matrix.package}}
        shell: bash
        run: |
          dotnet pack --configuration Release --output $GITHUB_WORKSPACE/out src/${{matrix.package}}

      - name: Record metadata
        uses: nciocpl/build-info-action@v1.0.1
        with:
            output-name: "${{ github.workspace }}/out/wwwroot/build-info.json"

      - name: Upload Published Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.package}}-${{ matrix.operating-system }}
          path: out


  integration_tests:
    name: Run Integration Tests (on Linux)
    runs-on: ubuntu-latest
    needs: test_build_release
    services:
      elasticsearch:
        image: elasticsearch:7.17.5
        env:
          ## Pass elasticsearch options via environment variables.
          discovery.type: single-node
        ports:
          ## NOTE: This will be exposed as a random port referenced below by job.services.elasticsearch.ports[9200]
          - 9200/tcp
        options: --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Setup test output directory
        shell: bash
        run: |
              ## Create test output and API logging location
              mkdir -p integration-tests/target

        # This project doesn't create an API as a deliverable artifact. In order to test the shared
        # API components, we have to create an API specifically for testing, which means it also has
        # to be built for the express purpose of running the integration tests.
      - name: Build Test Harness
        shell: bash
        run: |
              dotnet publish -c Release -o $GITHUB_WORKSPACE/built-api test/integration-test-harness/

      - name: Start API
        env:
          Elasticsearch__Servers: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
          ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
          API_URL: http://localhost:5000
          SLEEP_TIMEOUT: 5
          WAIT_DURATION: 120
          APP_PATH: ./built-api
          APP_ASSEMBLY: integration-test-harness.dll
        shell: bash
        run: |
              ## TODO: This should become a GitHub Action.

              ## Start the app and log output
              ## NOTE: We must change directory because while you can call `dotnet "${APP_PATH}/${APP_ASSEMBLY}"`
              ## it will not find the appsettings.json, so we must cd into the APP_PATH first
              cd $APP_PATH && dotnet $APP_ASSEMBLY > ../integration-tests/target/api_log.txt 2>&1 &

              time_waited=1
              echo "Checking status of ${API_URL}."
              until $(curl --output /dev/null --silent --fail ${API_URL}); do
                echo $?

                if [ $time_waited -ge $WAIT_DURATION ]; then
                    echo "Waited past duration. Exiting"
                    exit 1
                fi

                sleep $SLEEP_TIMEOUT
                time_waited=$((time_waited + SLEEP_TIMEOUT))
              done

              echo "API is up"

      - name: Run tests requiring no data be present.
        ## Normally bash runs with -e which exits the shell upon hitting
        ## an error which breaks our ability to capture those errors.
        shell: bash --noprofile --norc -o pipefail {0}
        run: |
              ## Run Karate
              cd integration-tests && ./bin/karate ./pre-data-features

              ## Store the exit code off so we can pass this step and
              ## capture the test output in the next step, but still
              ## fail the entire job
              echo TEST_EXIT_CODE_1=$? >> $GITHUB_ENV
              exit 0

      - name: Load Data into elasticsearch & prepare for tests
        env:
          ELASTIC_SEARCH_HOST: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        shell: bash
        run: |
              ## Create test output and API logging location
              mkdir -p integration-tests/target

              ## Load the elasticsearch data
              ./integration-tests/bin/load-integration-data.sh

      - name: Run Integration Test
        ## Normally bash runs with -e which exits the shell upon hitting
        ## an error which breaks our ability to capture those errors.
        shell: bash --noprofile --norc -o pipefail {0}
        run: |
              ## Run Karate
              cd integration-tests && ./bin/karate ./features

              ## Store the exit code off so we can pass this step and
              ## capture the test output in the next step, but still
              ## fail the entire job
              echo TEST_EXIT_CODE_2=$? >> $GITHUB_ENV
              exit 0

      - name: Upload Integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-tests/target

      - name: Fail build on bad tests
        shell: bash
        run: |
              ## Check if we had errors on the test step, and if so, fail the job
              if [ $TEST_EXIT_CODE_1 -ne 0 ] || [ $TEST_EXIT_CODE_2 -ne 0 ]; then
                echo "Tests Failed -- See Run Integration Test step or integration-test-results artifact for more information"
                exit $TEST_EXIT_CODE
              else
                echo "Tests passed"
              fi

  determine_whether_to_publish:

    # This an annoying workaround. Workflows have the ability to conditionally run a job by
    # using job.<job_id>.if and evaluating an expression, but the operations availble in an expression
    # don't allow us to evaluate whether the branch name matches a pattern.
    #
    # Additionally, although individual steps may also run conditionally (jobs.<job_id>.steps[*].if),
    # there's no ability to stop a job, shy of adding a "continue?" condition on every step.
    # So, we end up with an additional job, just for the purpose of deciding whether another job
    # should execute.

    name: Should NuGet packages be published?
    runs-on: windows-latest
    outputs:
      should_publish: ${{ steps.set_outputs.outputs.should_publish }}
    needs:
      - integration_tests

    steps:
      - name: Set outputs
        id: set_outputs
        shell: bash
        run: |
          # Only publish packages if the run was triggered by a push to the version number branch.
          BRANCH_NAME=$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
          if [[ ${{ github.event_name }}  == 'push' \
            && $(expr match "$BRANCH_NAME" 'v[0-9]*\.x$') -gt 0 ]]
          then
            SHOULD_PUBLISH=1
          else
            SHOULD_PUBLISH=0
          fi

          echo ${SHOULD_PUBLISH}
          echo "should_publish=${SHOULD_PUBLISH}" >> $GITHUB_OUTPUT


  publish_nuget_packages:

    # Only publish packages if the run was triggered by a push to the version number branch.
    if: ${{ needs.determine_whether_to_publish.outputs.should_publish == 1 }}

    name: Publish ${{matrix.package}} as NuGet package.
    runs-on: windows-latest
    needs:
      - determine_whether_to_publish
      - integration_tests
    env:
      SHOULD_RUN: ${{ needs.determine_whether_to_publish.outputs.should_publish }}
    strategy:
      matrix:
        package:
          - NCI.OCPL.Api.Common
          - NCI.OCPL.Api.Common.Testing
    permissions:
      packages: write

    steps:
      - name: Download Published Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{matrix.package}}-windows-latest
          path: ${{ github.workspace }}

      - name: Download global.json
        uses: actions/checkout@v4
        with:
          path: source

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: source/global.json
          source-url: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

        # This outputs a bogus warning that "No API Key was provided and no API Key could be found."
        # This is a bug in the dotnet program and not something wrong with the build process.
        # If this fails with a message saying "Forbidden" and the repository name, check that the
        # repository where the build is taking place matches the one in the .csproj files' <RepositoryUrl> element.
      - name: Publish NuGet package for ${{matrix.package}}
        shell: bash
        run: |
          dotnet nuget push ./*.nupkg

